{
  "version": 3,
  "sources": ["../../../contentlayer.config.js"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from 'contentlayer/source-files'\nimport remarkGfm from 'remark-gfm'\nimport rehypeSlug from 'rehype-slug'\n\nexport const Post = defineDocumentType(() => ({\n  name: 'Post',\n  contentType: 'mdx',\n  // Location of Post source files (relative to `contentDirPath`)\n  filePathPattern: '/*.mdx',\n  // At the time of writing, we also have to define the `fields`\n  // option to prevent an error on generation. We'll discuss\n  // this option later. For now, we'll add an empty object.\n  fields: {},\n  computedFields: {\n    slug: {\n      type: 'string',\n      resolve: (doc) => {\n        return doc._raw.flattenedPath\n      },\n    },\n    // excerpt: {\n    //   type: \"string\",\n    //   resolve: (post) =>\n    //     post.tldr ? post.tldr : parseMarkdown(post.body.raw, 155),\n    // },\n    // description: {\n    //   type: \"string\",\n    //   resolve: (post) => parseMarkdown(post.body.raw, 300),\n    // },\n    // timetoread: {\n    //   type: \"number\",\n    //   resolve: (post) => parseReadTime(post.body.raw)\n    // }\n  },\n}))\n\nexport const Markdown = defineDocumentType(() => ({\n  name: 'Markdown',\n  contentType: 'markdown',\n  // Location of Post source files (relative to `contentDirPath`)\n  filePathPattern: './**/*.md',\n  // At the time of writing, we also have to define the `fields`\n  // option to prevent an error on generation. We'll discuss\n  // this option later. For now, we'll add an empty object.\n  fields: {},\n  computedFields: {\n    slug: {\n      type: 'string',\n      resolve: (doc) => {\n        return doc._raw.flattenedPath\n      },\n    },\n    title: {\n      type: 'string',\n      resolve: (doc) => {\n        return doc._raw.sourceFileName.split('.md')?.[0]\n      },\n    }\n    // excerpt: {\n    //   type: \"string\",\n    //   resolve: (post) =>\n    //     post.tldr ? post.tldr : parseMarkdown(post.body.raw, 155),\n    // },\n    // description: {\n    //   type: \"string\",\n    //   resolve: (post) => parseMarkdown(post.body.raw, 300),\n    // },\n    // timetoread: {\n    //   type: \"number\",\n    //   resolve: (post) => parseReadTime(post.body.raw)\n    // }\n  },\n}))\n\nexport default makeSource({\n  contentDirPath: '../../docs',\n  documentTypes: [Post, Markdown],\n  mdx: {\n    esbuildOptions(options) {\n      options.target = 'esnext'\n      return options\n    },\n    remarkPlugins: [remarkGfm],\n    rehypePlugins: [rehypeSlug],\n  },\n})\n"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB;AAC/C,OAAO,eAAe;AACtB,OAAO,gBAAgB;AAEhB,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,aAAa;AAAA;AAAA,EAEb,iBAAiB;AAAA;AAAA;AAAA;AAAA,EAIjB,QAAQ,CAAC;AAAA,EACT,gBAAgB;AAAA,IACd,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ;AAChB,eAAO,IAAI,KAAK;AAAA,MAClB;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcF;AACF,EAAE;AAEK,IAAM,WAAW,mBAAmB,OAAO;AAAA,EAChD,MAAM;AAAA,EACN,aAAa;AAAA;AAAA,EAEb,iBAAiB;AAAA;AAAA;AAAA;AAAA,EAIjB,QAAQ,CAAC;AAAA,EACT,gBAAgB;AAAA,IACd,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ;AAChB,eAAO,IAAI,KAAK;AAAA,MAClB;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ;AAChB,eAAO,IAAI,KAAK,eAAe,MAAM,KAAK,IAAI,CAAC;AAAA,MACjD;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcF;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,MAAM,QAAQ;AAAA,EAC9B,KAAK;AAAA,IACH,eAAe,SAAS;AACtB,cAAQ,SAAS;AACjB,aAAO;AAAA,IACT;AAAA,IACA,eAAe,CAAC,SAAS;AAAA,IACzB,eAAe,CAAC,UAAU;AAAA,EAC5B;AACF,CAAC;",
  "names": []
}
