name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - build: linux
            os: ubuntu-24.04
            arch: x86_64
            target: x86_64-unknown-linux-gnu
          - build: macos
            os: macos-latest
            arch: x86_64
            target: x86_64-apple-darwin
          - build: macos
            os: macos-latest
            arch: aarch64
            target: aarch64-apple-darwin
          - build: windows
            os: windows-latest
            arch: x86_64
            target: x86_64-pc-windows-msvc
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3
        with:
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Install dependencies (ubuntu only)
        if: matrix.os == 'ubuntu-24.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev patchelf libgtk-3-dev librsvg2-dev libxcb-shape0-dev libxcb-xfixes0-dev libsoup-3.0 javascriptcoregtk-4.1 webkit2gtk-4.1 pkg-config libfreetype6-dev libfontconfig1-dev

      - name: Write env file
        run: |
          echo VITE_FIREBASE_APIKEY=${{ secrets.VITE_FIREBASE_APIKEY }}  >> ./apps/desktop/.env
          echo VITE_FIREBASE_APPID=${{ secrets.VITE_FIREBASE_APPID }}  >> ./apps/desktop/.env
          echo VITE_FIREBASE_MESSAGINGSENDERID=${{ secrets.VITE_FIREBASE_MESSAGINGSENDERID }}  >> ./apps/desktop/.env
          echo VITE_FIREBASE_MEASUREMENTID=${{ secrets.VITE_FIREBASE_MEASUREMENTID }}  >> ./apps/desktop/.env
          echo VITE_UMENG_APPKEY=${{ secrets.VITE_UMENG_APPKEY }}  >> ./apps/desktop/.env
          echo VITE_SENTRY_DSN=${{ secrets.VITE_SENTRY_DSN }}  >> ./apps/desktop/.env

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@2656b87321093db1cb55fbd73183d195214fdfd1 # v2
        with:
          key: ${{ matrix.target }}

      - name: Install dependencies
        run: yarn install --immutable

      - name: Setup
        run: yarn setup

      - name: Build workspaces
        run: yarn build

      - name: Install rust target
        run: rustup target add ${{ matrix.target }}

      - name: Build the app
        run: yarn build:desktop --target ${{ matrix.target }}
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}

      - uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu-24.04'
        with:
          name: artifacts-${{ matrix.target }}
          path: |
            ./target/${{ matrix.target }}/release/bundle/appimage/**.AppImage.*
            ./target/${{ matrix.target }}/release/bundle/appimage/**.AppImage
            ./target/${{ matrix.target }}/release/bundle/deb/**.deb
            ./target/${{ matrix.target }}/release/bundle/rpm/**.rpm

      - uses: actions/upload-artifact@v4
        if: matrix.os == 'macos-latest' && matrix.arch == 'aarch64'
        with:
          name: aarch64artifacts-${{ matrix.target }}
          path: |
            ./target/${{ matrix.target }}/release/bundle/dmg/**.dmg
            ./target/${{ matrix.target }}/release/bundle/macos/**.app.*

      - uses: actions/upload-artifact@v4
        if: matrix.os == 'macos-latest' && matrix.arch == 'x86_64'
        with:
          name: artifacts-${{ matrix.target }}
          path: |
            ./target/${{ matrix.target }}/release/bundle/dmg/**.dmg
            ./target/${{ matrix.target }}/release/bundle/macos/**.app.*

      - uses: actions/upload-artifact@v4
        if: matrix.os == 'windows-latest'
        with:
          name: artifacts-${{ matrix.target }}
          path: |
            ./target/${{ matrix.target }}/release/bundle/msi/**
            ./target/${{ matrix.target }}/release/bundle/nsis/**

  build-offline-installer:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - build: windows-offline-installer
            os: windows-latest
            arch: x86_64
            target: x86_64-pc-windows-msvc
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3
        with:
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Write env file
        run: |
          echo VITE_FIREBASE_APIKEY=${{ secrets.VITE_FIREBASE_APIKEY }}  >> ./apps/desktop/.env
          echo VITE_FIREBASE_APPID=${{ secrets.VITE_FIREBASE_APPID }}  >> ./apps/desktop/.env
          echo VITE_FIREBASE_MESSAGINGSENDERID=${{ secrets.VITE_FIREBASE_MESSAGINGSENDERID }}  >> ./apps/desktop/.env
          echo VITE_FIREBASE_MEASUREMENTID=${{ secrets.VITE_FIREBASE_MEASUREMENTID }}  >> ./apps/desktop/.env
          echo VITE_UMENG_APPKEY=${{ secrets.VITE_UMENG_APPKEY }}  >> ./apps/desktop/.env
          echo VITE_SENTRY_DSN=${{ secrets.VITE_SENTRY_DSN }}  >> ./apps/desktop/.env

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@2656b87321093db1cb55fbd73183d195214fdfd1 # v2
        with:
          key: ${{ matrix.target }}

      - name: Install dependencies
        run: yarn install --immutable

      - name: Setup
        run: yarn setup

      - name: Use offline bundle
        if: matrix.os == 'windows-latest'
        run: yarn use-offline-bundle

      - name: Build workspaces
        run: yarn build

      - name: Install rust target
        run: rustup target add ${{ matrix.target }}

      - name: Build the app
        run: yarn build:desktop --target ${{ matrix.target }}
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}

      - uses: actions/upload-artifact@v4
        if: matrix.os == 'windows-latest'
        with:
          name: offline-installer-artifacts-${{ matrix.target }}
          path: |
            ./target/${{ matrix.target }}/release/bundle/msi/**
            ./target/${{ matrix.target }}/release/bundle/nsis/**

  release:
    permissions:
      contents: write
    needs: build
    runs-on: ubuntu-24.04
    steps:
      - name: Query version number
        run: echo "version=${GITHUB_REF:11}" >> $GITHUB_ENV

      - name: Download x86_64 artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: artifacts-*
          path: artifacts/x86_64
          merge-multiple: true

      - name: Download aarch64 artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: aarch64artifacts-*
          path: artifacts/aarch64
          merge-multiple: true

      - name: Download offline installer artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: offline-installer-artifacts-*
          path: artifacts/offline-installer
          merge-multiple: true

      - name: Rename artifacts
        run: |
          mv "artifacts/aarch64/dmg/MarkFlowy_${{ env.version }}_aarch64.dmg" "artifacts/MarkFlowy_v${{ env.version }}_aarch64.dmg"
          mv "artifacts/aarch64/macos/MarkFlowy.app.tar.gz" "artifacts/MarkFlowy_aarch64.app.tar.gz"
          mv "artifacts/aarch64/macos/MarkFlowy.app.tar.gz.sig" "artifacts/MarkFlowy_aarch64.app.tar.gz.sig"

          mv "artifacts/x86_64/dmg/MarkFlowy_${{ env.version }}_x64.dmg" "artifacts/MarkFlowy_v${{ env.version }}_x64.dmg"
          mv "artifacts/x86_64/macos/MarkFlowy.app.tar.gz" "artifacts/MarkFlowy_x64.app.tar.gz"
          mv "artifacts/x86_64/macos/MarkFlowy.app.tar.gz.sig" "artifacts/MarkFlowy_x64.app.tar.gz.sig"

          mv "artifacts/x86_64/deb/MarkFlowy_${{ env.version }}_amd64.deb" "artifacts/MarkFlowy_v${{ env.version }}_amd64.deb"
          mv "artifacts/x86_64/appimage/MarkFlowy_${{ env.version }}_amd64.AppImage" "artifacts/MarkFlowy_v${{ env.version }}_amd64.AppImage"
          mv "artifacts/x86_64/appimage/MarkFlowy_${{ env.version }}_amd64.AppImage.sig" "artifacts/MarkFlowy_v${{ env.version }}_amd64.AppImage.sig"
          mv artifacts/x86_64/rpm/* artifacts/

          mv "artifacts/x86_64/msi/MarkFlowy_${{ env.version }}_x64_en-US.msi" "artifacts/MarkFlowy_v${{ env.version }}_x64.msi"
          mv "artifacts/x86_64/msi/MarkFlowy_${{ env.version }}_x64_en-US.msi.sig" "artifacts/MarkFlowy_v${{ env.version }}_x64.msi.sig"

          mv "artifacts/x86_64/nsis/MarkFlowy_${{ env.version }}_x64-setup.exe" "artifacts/MarkFlowy_v${{ env.version }}_x64-setup.exe"
          mv "artifacts/x86_64/nsis/MarkFlowy_${{ env.version }}_x64-setup.exe.sig" "artifacts/MarkFlowy_v${{ env.version }}_x64-setup.exe.sig"

          mv "artifacts/offline-installer/msi/MarkFlowy_${{ env.version }}_x64_en-US.msi" "artifacts/MarkFlowy_v${{ env.version }}_offline_installer_x64.msi"
          mv "artifacts/offline-installer/msi/MarkFlowy_${{ env.version }}_x64_en-US.msi.sig" "artifacts/MarkFlowy_v${{ env.version }}_offline_installer_x64.msi.sig"

          mv "artifacts/offline-installer/nsis/MarkFlowy_${{ env.version }}_x64-setup.exe" "artifacts/MarkFlowy_v${{ env.version }}_offline_installer_x64-setup.exe"
          mv "artifacts/offline-installer/nsis/MarkFlowy_${{ env.version }}_x64-setup.exe.sig" "artifacts/MarkFlowy_v${{ env.version }}_offline_installer_x64-setup.exe.sig"

      - run: |
          cat > release.txt << EOF
          ## v${{ env.version }}

          <details>

          <summary> FAQ | 常见问题 </summary>

          ## FAQ:

          ### Windows users
          - We provide an Offline Installer with built-in ​​WebView2 Runtime​​ for devices that cannot automatically install WebView2 online or are in a no-network environment. Please note that this installer is relatively large in size and is recommended to be used only when necessary.

          ### macOS users
          - ​​macOS x86_64 version​​: When you launch the app for the first time, you may see a prompt saying "Cannot open the application" because the app is from an unidentified developer. Please go to "System Preferences" > "Security & Privacy", and click "Open Anyway" in the "General" tab.
          - ​​macOS aarch64 (Apple Silicon) users​​: If you see a prompt saying "The application is damaged" when you launch it for the first time, it is usually due to system security restrictions. Please open the terminal and run the following command to fix the permission issue, and then you can open the app normally:
            xattr -cr /Applications/MarkFlowy.app

          ## 常见问题：

          ### Windows 用户
          - 我们提供了内置 ​​WebView2 运行时​​的离线安装包（Offline Installer），适用于无法自动在线安装 WebView2 或处于无网络环境的设备。请注意，此安装包体积较大，建议仅在必要时使用.

          ### macOS 用户
          - ​​macOS x86_64 版本​​：首次启动应用时，系统可能会提示“无法打开应用程序”，这是因为应用来自未识别的开发者。请前往“系统偏好设置” > “安全性与隐私”，在“通用”标签页中点击“仍要打开”即可.
          - ​​macOS aarch64 (Apple Silicon) 用户​​：首次启动若提示“应用程序已损坏”，通常是由于系统的安全限制。请打开终端，执行以下命令来修复权限问题，之后即可正常打开应用
            xattr -cr /Applications/MarkFlowy.app

          </details>

          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v2.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: v${{ env.version }}
          releaseName: v${{ env.version }}
          body_path: release.txt
          releaseDraft: false
          prerelease: true
          files: ./artifacts/**/*

      - uses: actions/checkout@v3

      - name: Install dependencies
        run: yarn install --immutable

      - name: Setup
        run: yarn setup

      - name: Updater JSON
        run: yarn updater --token=${{ secrets.GITHUB_TOKEN }}

      - name: Upload Additional File to Same Release
        uses: softprops/action-gh-release@v2.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.version }}
          files: ./apps/desktop/updater/install.json
          overwrite: true

      - name: Deploy install.json
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./apps/desktop/updater
          # force_orphan: true
 
  upgradeLink-upload:
    needs: release
    permissions:
      contents: write
    runs-on: ubuntu-24.04
    steps:
      - name: Query version number
        run: echo "version=${GITHUB_REF:11}" >> $GITHUB_ENV

      - name: Generate release tag
        id: save_tag
        run: |
          # 调试输出
          echo ${{ env.version }}

      - name: Send a request to UpgradeLink
        uses: toolsetlink/upgradelink-action@v5
        with:
          source-url: 'https://github.com/drl990114/MarkFlowy/releases/download/v${{ env.version }}/install.json'
          access-key: ${{ secrets.UPGRADE_LINK_ACCESS_KEY }}  # ACCESS_KEY  密钥key
          tauri-key: ${{ secrets.UPGRADE_LINK_TAURI_KEY }}    # TAURI_KEY tauri 应用唯一标识
          github-token: ${{ secrets.GITHUB_TOKEN }}

